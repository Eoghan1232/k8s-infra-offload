This README explains the procedure to run stand alone simple l3 go
implementation using p4runtime go client APIs
===============================================================================
1) 1) clone and build P4SDE repo on host/server machine 
    mkdir p4-sde
    cd p4-sde
    git clone  https://github.com/intel-innersource/networking.ethernet.acceleration.vswitch.p4-sde.p4-driver.git -b main --recursive p4_sde-nat-p4-driver
    mkdir install

    ** Below steps are important, need to be executed on all terminals **
    export SDE=$PWD
    export SDE_INSTALL=$SDE/install
    export PKG_CONFIG_PATH=${SDE_INSTALL}/lib/x86_64-linux-gnu/pkgconfig
    export LD_LIBRARY_PATH=$SDE_INSTALL/lib
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$SDE_INSTALL/lib/x86_64-linux-gnu
    echo $SDE
    echo $SDE_INSTALL
    echo $PKG_CONFIG_PATH
    echo $LD_LIBRARY_PATH
    ***********************

    cd $SDE/p4_sde-nat-p4-driver
    git checkout main
    python3 tools/setup/install_dep.py
    ./autogen.sh
    ./configure --prefix=$SDE_INSTALL
    make -j 8
    make -j 8 install

2) clone and build P4OVS repo on host/server machine 
    git clone  https://github.com/intel-innersource/networking.ethernet.acceleration.vswitch.p4-ovs.ipdk-p4ovs.git P4-OVS
    cd P4-OVS
    git submodule update --init --recursive
    pip3 install ovspy
    pip3 install -r Documentation/requirements.txt
    pip3 install Cython
    cd p4runtime/py ; python setup.py build ; python setup.py install_lib
    < remove existing packeges from the machine >
    ./install_dep_packages.sh /root/
    ./build-p4ovs.sh $SDE_INSTALL

3) clone p4runtime go client repo from https://github.com/antoninbas/p4runtime-go-client

4) clone p4k8s repo from https://github.com/intel-innersource/networking.ethernet.acceleration.plugins.p4-k8s

5) run OVS and p4rt service on host machine
   source p4ovs_env_setup.sh <SDE_INSTALL_PATH>
   ./run_ovs.sh

6) create gnmi ports on the host itself
   alias sudo='sudo PATH="$PATH" HOME="$HOME" LD_LIBRARY_PATH="$LD_LIBRARY_PATH"'
   sudo gnmi-cli set "device:virtual-device,name:TAP0,pipeline-name:pipe,mempool-name:MEMPOOL0,mtu:1500,port-type:TAP"
   sudo gnmi-cli set "device:virtual-device,name:TAP1,pipeline-name:pipe,mempool-name:MEMPOOL0,mtu:1500,port-type:TAP"

7) add static ip addresses to the created TAP ports TAP0 and TAP1
   ip addr add 1.1.1.1/24 dev TAP0
   ip addr add 1.1.1.2/24 dev TAP1

8) bring up the TAP interfaces
   ip link set TAP0 up
   ip link set TAP1 up

9) go to <your-working-directory>/p4-k8s/inframanager/cmd/TEST/simple_l3_test/
directory

10) copy simple_l3_test directory to
<your-working-directory>/p4runtime-go-client/cmd/ and open simple_l3_main.go

11) change func simpleL3Testmain() to func main()

12) build this file using "go build simple_l3_main.go" and then just run it
using "./simple_l3_main"
this should set the pipeline with simple_l3 p4 program and configure the rules
as well

13) on the host terminal start scapy and send the packet using:
sendp(Ether(dst="00:00:00:00:03:14",
src="9e:ba:ce:98:d9:e8")/IP(src="192.168.1.10",
dst="1.1.1.1")/UDP()/Raw(load="0"*50), iface='TAP1')

14) whether the packet has reached the other end or not can be validated using
tcpdump -i TAP0 -xx -nnn -ee

